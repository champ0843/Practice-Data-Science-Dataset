	Learned about Numpy and Pandas
	Numpy:
		It is basically used for handling Multidimensional array.Numpy arrays class are basically called ndarray
		In numpy dimensions are called axes
		Numpy is an extension to python and is helpful for powerful data structures.
		Command to install Numpy:
			pip install numpy
		The important attributes for Numpy are :
			ndarray.ndim : Number of axes of the array
			ndarray.shape : Dimension of the array
			ndarray.size
				the total number of elements of the array. This is equal to the product of the elements of shape.
			ndarray.dtype
				an object describing the type of the elements in the array. 
				One can create or specify dtype’s using standard Python types. 
				Additionally NumPy provides types of its own. numpy.int32, numpy.int16, and numpy.float64 are some examples.
			ndarray.itemsize
				the size in bytes of each element of the array. 
				For example, an array of elements of type float64 has itemsize 8 (=64/8), while one of type complex32 has itemsize 4 (=32/8). 
				It is equivalent to ndarray.dtype.itemsize.
			ndarray.data
				the buffer containing the actual elements of the array. 
				Normally, we won’t need to use this attribute because we will access the elements in an array using indexing facilities.
				
				
	Pandas:
		Panda is a high level data manipulation tool.It is built on the Numpy package and its key data structures are called DataFrame
		DataFrame allows us to store and manipulate tabular data in rows of observation and columns of variable.It can be used for various level of statistics
		
		Importing pandas : import pandas as pd    #pd is an alias for pandas
		
		
		Pandas handle data in 3 form 1.Series 2.DataFrame 3.Panel
		1.Series : Series is a one-dimensional labeled array capable of holding any data type (integers, strings, floating point numbers, Python objects, etc.).
				   The axis labels are collectively referred to as the index. The basic method to create a Series is to call:
				   s = pd.Series(data, index=index)
		
		2.DataFrame : DataFrame is a 2-dimensional labeled data structure with columns of potentially different types. 
					  You can think of it like a spreadsheet or SQL table, or a dict of Series objects
					  
		3.Panel : Panel is a somewhat less-used, but still important container for 3-dimensional data. 
		
		
		Different ways to create a DataFrame :
		 Can be created using dictionary
		 Can be created by fetching data from csv file using pd.read_csv('filename')

		 
		Indexing in DataFrame :
		 Easiset way to do indexing is using sqaure brackets
		 Single bracket used will output a Pandas series 
		 Double bracket used will output a pandas DataFrame
		 You can also use loc and iloc to perform just about any data selection operation. 
		 loc is label-based, which means that you have to specify rows and columns based on their row and column labels. 
		 iloc is integer index based, so you have to specify rows and columns by their integer index
		 
		Basic attributes for DataFrame : 
		 T : Transposes rows and Columns
		 axes : Returns a list with the row axis labels and column axis labels as the only members
		 dtypes : Returns the dataType of the DataFrame
		 ndim : Number of axes
		 shape : Returns a tuple representing the dimensionality of the DataFrame.
		 size : Number of elements in the NDFrame.
		 head() : Returns the first n rows.  #If n specified in round brackets
		 tail()	: Returns last n rows.
		
		Statistics operations : Functions & Description
		 count() : Number of non-null observations
		 sum() : Returns the sum of the values for the requested axis. By default, axis is index (axis=0).
				 Each individual column is added individually (Strings are appended).
		 mean() : Returns the average value
		 median() :	Median of Values
		 mode()	: Mode of values
		 min() : Minimum Value
		 max() : Maximum Value
		 abs() : Absolute Value
		 prod() : Product of Values
		 cumsum() : Cumulative Sum
		 cumprod() : Cumulative Product
		 std() : Returns the Bressel standard deviation of the numerical columns
		 describe() : The describe() function computes a summary of statistics pertaining to the DataFrame columns.
		 
		 
		To apply your own or another library’s functions to Pandas objects, you should be aware of the three important methods :
			Table wise Function Application: pipe()
			Row or Column Wise Function Application: apply()
			Element wise Function Application: applymap()
		
		Example:
			import pandas as pd
			import numpy as np

			def adder(ele1,ele2):
				return ele1+ele2

			df = pd.DataFrame(np.random.randn(5,3),columns=['col1','col2','col3'])
			df.pipe(adder,2)
			print(df)
		
		Output:
			        col1       col2       col3
			  0   2.176704   2.219691   1.509360
			  1   2.222378   2.422167   3.953921
			  2   2.241096   1.135424   2.696432
			  3   2.355763   0.376672   1.182570
			  4   2.308743   2.714767   2.130288
			  
		The other concepts include reindexing and renaming
		
		Iterating a DataFrame :
			Iterating a DataFrame gives column names
			To iterate over the rows of the DataFrame, we can use the following functions :
				iteritems() − to iterate over the (key,value) pairs
				iterrows() − iterate over the rows as (index,series) pairs
				itertuples() − iterate over the rows as namedtuples
				
				
				iteritems : Example : import pandas as pd
									  import numpy as np
									  df = pd.DataFrame(np.random.randn(4,3),columns=['col1','col2','col3'])
									  for key,value in df.iteritems():
									     print(key,value)
										 
				iteritems : Example : import pandas as pd
									  import numpy as np
									  df = pd.DataFrame(np.random.randn(4,3),columns=['col1','col2','col3'])
									  for row_index,row in df.iterrows():
										 print(row_index,row)
										 
				iteritems : Example : import pandas as pd
									  import numpy as np
									  df = pd.DataFrame(np.random.randn(4,3),columns=['col1','col2','col3'])
									  for row in df.itertuples():
										 print(row)
				
				
				
				
			Note − Do not try to modify any object while iterating. 
				   Iterating is meant for reading and the iterator returns a copy of the original object (a view),
				   thus the changes will not reflect on the original object.
			 
		There are two kinds of sorting available in Pandas. They are −
			By label
			By Actual Value
			
			By Label :
				Using the sort_index() method, by passing the axis arguments and the order of sorting, DataFrame can be sorted.
				By default, sorting is done on row labels in ascending order.
				
			By Value :
				Like index sorting, sort_values() is the method for sorting by values. 
				It accepts a 'by' argument which will use the column name of the DataFrame with which the values are to be sorted.
				sort_values() provides a provision to choose the algorithm from mergesort, heapsort and quicksort. Mergesort is the only stable algorithm
				
				
		Pandas working with the Text Data : 
			get_dummies() : Returns the DataFrame with One-Hot Encoded values.
			replace(a,b) : Replaces the value a with the value b.
			
		Pandas Statistical Function : 
			Percent_change : Series, DatFrames and Panel, all have the function pct_change(). 
							 This function compares every element with its prior element and computes the change percentage.
							 -df.pct_change()
			
			Covariance : Covariance is applied on series data. The Series object has a method cov to compute covariance between series objects. 
						 NA will be excluded automatically. -s1.cov(s2)
						 Covariance method when applied on a DataFrame, computes cov between all the columns. -frame.cov()
						 
			Correlation : Correlation shows the linear relationship between any two array of values (series). 
						  There are multiple methods to compute the correlation like pearson(default), spearman and kendall.
						  print(frame.corr())
						  
			Data Ranking : Data Ranking produces ranking for each element in the array of elements. In case of ties, assigns the mean rank
			
		
		Checking for missing value : To make detecting missing values easier (and across different array dtypes), 
									 Pandas provides the isnull() and notnull() functions, which are also methods on Series and DataFrame objects 
		
		Calcualtions and Missing Data : When summing data NA will be treated as zero.But hwne all values are NA the sum will be NA.
	
		Cleaning / Filling Missing Data : Pandas provides various methods for cleaning the missing values. 
										  The fillna function can “fill in” NA values with non-null data in a couple of ways, 
										  which we have illustrated in the following sections
										 
		Drop Missing Values : If you want to simply exclude the missing values, then use the dropna function along with the axis argument.
							  By default, axis=0, i.e., along row, which means that if any value within a row is NA then the whole row is excluded.
							  
		Pandas GroupBy : Any groupby operation involves one of the following operations on the original object 
			@ Splitting the Object
			@ Applying a function
			@ Combining the results
		 In many situations, we split the data into sets and we apply some functionality on each subset. 
			@ Aggregation - Computing a summary statistic
			@ Transformation - Perform some group specific operation
			@ Filtration - Discarding the data with some condition
			
			Splitting data into groups : 
				Pandas object can be split into any of their objects.The different ways to split a object are as follows -
					obj.groupby('key')
					obj.groupby(['key1','key2'])
					obj.groupby(key,axis=1)
				to view the value in a group we can use - obj.groupby('key').groups
				
				Select a Group : 
				 Using get_group() method we can select a single group
				
				Aggregation : An aggregated function returns a single aggregated value for each group. 
							  Once the group by object is created, several aggregation operations can be performed on the grouped data.
							 
				Filtration : Filtration filters the data on a defined criteria and returns the subset of data. The filter() function is used to filter the data.
				
			Python Pandas Visualization : 
				Basic Plotting : Plot
					This functionality on Series and DataFrame is just a simple wrapper around the matplotlib libraries plot() method.
					example : 
						import pandas as pd
						import numpy as np
						
						df = pd.DataFrame(np.random.randn(10,4),index=pd.date_range('1/1/2000',
						periods=10), columns=list('ABCD'))
						
						df.plot() 
						
						for bar plot : df.plot.bar()
						for stacked bar plot : df.plot.bar(stacked=True)     #"bar" is used for vertical plotting and "barh" is used for horizontal plotting
						histogram plotting : df.plot.hist()
						box plot : df.plot.box()
						Area plot : df.plot.area()
						Scatter plot : df.plot.scatter(x='a',y='b')
						pie chart : df.plot.pie(subplots=True)
						
			I/O Operation in Pandas for reading DataFrame : read_csv("FileName") : Used to read the csv file and create the Data Frame 
			
			
	Matplotlib : 
		Matplotlib is a plotting library for Python.
		It is used along with NumPy to provide an environment that is an effective open source alternative for MatLab
		
		import matplotlib.pyplot as plt #Used to import the matplotlib
		Here pyplot() is the most important function in matplotlib library, which is used to plot 2D data
		The graphical representation is displayed by show() function.
		
		subplot() :	The subplot() function allows you to plot different things in the same figure.
			example : 
					import numpy as np 
					import matplotlib.pyplot as plt  
					
					# Compute the x and y coordinates for points on sine and cosine curves 
					x = np.arange(0, 3 * np.pi, 0.1) 
					y_sin = np.sin(x) 
					y_cos = np.cos(x)  
					
					# Set up a subplot grid that has height 2 and width 1, 
					# and set the first such subplot as active. 
					plt.subplot(2, 1, 1)
					
					# Make the first plot 
					plt.plot(x, y_sin) 
					plt.title('Sine')  
					
					# Set the second subplot as active, and make the second plot. 
					plt.subplot(2, 1, 2) 
					plt.plot(x, y_cos) 
					plt.title('Cosine')  
					
					# Show the figure. 
					plt.show()
		
		bar() : The pyplot submodule provides bar() function to generate bar graphs.
